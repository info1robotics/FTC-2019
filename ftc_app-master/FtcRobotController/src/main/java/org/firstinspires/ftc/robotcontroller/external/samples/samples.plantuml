@startuml

title __SAMPLES's Class Diagram__\n

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class BasicOpMode_Iterative {
        - runtime : ElapsedTime
        - leftDrive : DcMotor
        - rightDrive : DcMotor
        + init()
        + init_loop()
        + start()
        + loop()
        + stop()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class BasicOpMode_Linear {
        - runtime : ElapsedTime
        - leftDrive : DcMotor
        - rightDrive : DcMotor
        + runOpMode()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class ConceptCompassCalibration {
        - runtime : ElapsedTime
        ~ compass : CompassSensor
        {static} ~ MOTOR_POWER : double
        {static} ~ HOLD_TIME_MS : long
        {static} ~ CAL_TIME_SEC : double
        + runOpMode()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class ConceptDIMAsIndicator {
        {static} ~ BLUE_LED : int
        {static} ~ RED_LED : int
        - runtime : ElapsedTime
        ~ dim : DeviceInterfaceModule
        + runOpMode()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class ConceptI2cAddressChange {
        {static} + ADDRESS_SET_NEW_I2C_ADDRESS : int
        {static} + TRIGGER_BYTE_1 : byte
        {static} + TRIGGER_BYTE_2 : byte
        {static} + IR_SEEKER_V3_FIRMWARE_REV : byte
        {static} + IR_SEEKER_V3_SENSOR_ID : byte
        {static} + IR_SEEKER_V3_ORIGINAL_ADDRESS : I2cAddr
        {static} + COLOR_SENSOR_FIRMWARE_REV : byte
        {static} + COLOR_SENSOR_SENSOR_ID : byte
        {static} + COLOR_SENSOR_ORIGINAL_ADDRESS : byte
        {static} + MANUFACTURER_CODE : byte
        {static} + FIRMWARE_REV : byte
        {static} + SENSOR_ID : byte
        {static} + READ_MODE : int
        {static} + ADDRESS_MEMORY_START : int
        {static} + TOTAL_MEMORY_LENGTH : int
        {static} + BUFFER_CHANGE_ADDRESS_LENGTH : int
        ~ port : int
        ~ readCache : byte[]
        ~ readLock : Lock
        ~ writeCache : byte[]
        ~ writeLock : Lock
        ~ currentAddress : I2cAddr
        ~ newAddress : I2cAddr
        ~ dim : DeviceInterfaceModule
        + runOpMode()
        - foundExpectedBytes()
        - performAction()
        - writeNewAddress()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class ConceptNullOp {
        - runtime : ElapsedTime
        + init()
        + init_loop()
        + start()
        + loop()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class ConceptRampMotorSpeed {
        {static} ~ INCREMENT : double
        {static} ~ CYCLE_MS : int
        {static} ~ MAX_FWD : double
        {static} ~ MAX_REV : double
        ~ motor : DcMotor
        ~ power : double
        ~ rampUp : boolean
        + runOpMode()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class ConceptRevSPARKMini {
        - runtime : ElapsedTime
        - leftDrive : DcMotorSimple
        - rightDrive : DcMotorSimple
        + runOpMode()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class ConceptScanServo {
        {static} ~ INCREMENT : double
        {static} ~ CYCLE_MS : int
        {static} ~ MAX_POS : double
        {static} ~ MIN_POS : double
        ~ servo : Servo
        ~ position : double
        ~ rampUp : boolean
        + runOpMode()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class ConceptSoundsASJava {
        - goldFound : boolean
        - silverFound : boolean
        - isX : boolean
        - isB : boolean
        - wasX : boolean
        - WasB : boolean
        + runOpMode()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class ConceptSoundsOnBotJava {
        - soundPath : String
        - goldFile : File
        - silverFile : File
        - isX : boolean
        - isB : boolean
        - wasX : boolean
        - WasB : boolean
        + runOpMode()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class ConceptTelemetry {
        ~ poemLine : int
        ~ poemElapsed : ElapsedTime
        {static} ~ poem : String[]
        + runOpMode()
        ~ emitPoemLine()
        ~ getBatteryVoltage()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class ConceptTensorFlowObjectDetection {
        {static} - TFOD_MODEL_ASSET : String
        {static} - LABEL_GOLD_MINERAL : String
        {static} - LABEL_SILVER_MINERAL : String
        {static} - VUFORIA_KEY : String
        - vuforia : VuforiaLocalizer
        - tfod : TFObjectDetector
        + runOpMode()
        - initVuforia()
        - initTfod()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class ConceptTensorFlowObjectDetectionWebcam {
        {static} - TFOD_MODEL_ASSET : String
        {static} - LABEL_GOLD_MINERAL : String
        {static} - LABEL_SILVER_MINERAL : String
        {static} - VUFORIA_KEY : String
        - vuforia : VuforiaLocalizer
        - tfod : TFObjectDetector
        + runOpMode()
        - initVuforia()
        - initTfod()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class ConceptVuMarkIdentification {
        {static} + TAG : String
        ~ lastLocation : OpenGLMatrix
        ~ vuforia : VuforiaLocalizer
        + runOpMode()
        ~ format()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class ConceptVuMarkIdentificationWebcam {
        {static} + TAG : String
        ~ lastLocation : OpenGLMatrix
        ~ vuforia : VuforiaLocalizer
        ~ webcamName : WebcamName
        + runOpMode()
        ~ format()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class ConceptVuforiaNavRoverRuckus {
        {static} - VUFORIA_KEY : String
        {static} - mmPerInch : float
        {static} - mmFTCFieldWidth : float
        {static} - mmTargetHeight : float
        {static} - CAMERA_CHOICE : CameraDirection
        - lastLocation : OpenGLMatrix
        - targetVisible : boolean
        ~ vuforia : VuforiaLocalizer
        + runOpMode()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class ConceptVuforiaNavigation {
        {static} + TAG : String
        ~ lastLocation : OpenGLMatrix
        ~ vuforia : VuforiaLocalizer
        + runOpMode()
        ~ format()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class ConceptVuforiaNavigationWebcam {
        {static} + TAG : String
        ~ lastLocation : OpenGLMatrix
        ~ captureCounter : int
        ~ captureDirectory : File
        ~ vuforia : VuforiaLocalizer
        ~ webcamName : WebcamName
        + runOpMode()
        ~ format()
        ~ captureFrameToFile()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class HardwarePushbot {
        + leftDrive : DcMotor
        + rightDrive : DcMotor
        + leftArm : DcMotor
        + leftClaw : Servo
        + rightClaw : Servo
        {static} + MID_SERVO : double
        {static} + ARM_UP_POWER : double
        {static} + ARM_DOWN_POWER : double
        ~ hwMap : HardwareMap
        - period : ElapsedTime
        + HardwarePushbot()
        + init()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class PushbotAutoDriveByEncoder_Linear {
        - runtime : ElapsedTime
        {static} ~ COUNTS_PER_MOTOR_REV : double
        {static} ~ DRIVE_GEAR_REDUCTION : double
        {static} ~ WHEEL_DIAMETER_INCHES : double
        {static} ~ COUNTS_PER_INCH : double
        {static} ~ DRIVE_SPEED : double
        {static} ~ TURN_SPEED : double
        + runOpMode()
        + encoderDrive()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class PushbotAutoDriveByGyro_Linear {
        ~ gyro : ModernRoboticsI2cGyro
        {static} ~ COUNTS_PER_MOTOR_REV : double
        {static} ~ DRIVE_GEAR_REDUCTION : double
        {static} ~ WHEEL_DIAMETER_INCHES : double
        {static} ~ COUNTS_PER_INCH : double
        {static} ~ DRIVE_SPEED : double
        {static} ~ TURN_SPEED : double
        {static} ~ HEADING_THRESHOLD : double
        {static} ~ P_TURN_COEFF : double
        {static} ~ P_DRIVE_COEFF : double
        + runOpMode()
        + gyroDrive()
        + gyroTurn()
        + gyroHold()
        ~ onHeading()
        + getError()
        + getSteer()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class PushbotAutoDriveByTime_Linear {
        - runtime : ElapsedTime
        {static} ~ FORWARD_SPEED : double
        {static} ~ TURN_SPEED : double
        + runOpMode()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class PushbotAutoDriveToLine_Linear {
        ~ lightSensor : LightSensor
        {static} ~ WHITE_THRESHOLD : double
        {static} ~ APPROACH_SPEED : double
        + runOpMode()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class PushbotTeleopPOV_Linear {
        ~ clawOffset : double
        ~ CLAW_SPEED : double
        + runOpMode()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class PushbotTeleopTank_Iterative {
        ~ clawOffset : double
        ~ CLAW_SPEED : double
        + init()
        + init_loop()
        + start()
        + loop()
        + stop()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class SampleRevBlinkinLedDriver {
        {static} - LED_PERIOD : int
        {static} - GAMEPAD_LOCKOUT : int
        ~ blinkinLedDriver : RevBlinkinLedDriver
        ~ pattern : BlinkinPattern
        ~ patternName : Item
        ~ display : Item
        ~ ledCycleDeadline : Deadline
        ~ gamepadRateLimit : Deadline
        + init()
        + loop()
        # handleGamepad()
        # setDisplayKind()
        # doAutoDisplay()
        # displayPattern()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    enum DisplayKind {
      MANUAL
      AUTO
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class SensorAdafruitRGB {
        ~ sensorRGB : ColorSensor
        ~ cdim : DeviceInterfaceModule
        {static} ~ LED_CHANNEL : int
        + runOpMode()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class SensorBNO055IMU {
        ~ imu : BNO055IMU
        ~ angles : Orientation
        ~ gravity : Acceleration
        + runOpMode()
        ~ composeTelemetry()
        ~ formatAngle()
        ~ formatDegrees()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class SensorBNO055IMUCalibration {
        ~ imu : BNO055IMU
        ~ angles : Orientation
        + runOpMode()
        ~ composeTelemetry()
        ~ formatAngle()
        ~ formatDegrees()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class SensorColor {
        ~ colorSensor : NormalizedColorSensor
        ~ relativeLayout : View
        + runOpMode()
        # runSample()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class SensorDIO {
        ~ BLUE_LED_CHANNEL : int
        ~ RED_LED_CHANNEL : int
        + runOpMode()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class SensorDigitalTouch {
        ~ digitalTouch : DigitalChannel
        + runOpMode()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class SensorKLNavxMicro {
        ~ gyro : IntegratingGyroscope
        ~ navxMicro : NavxMicroNavigationSensor
        ~ timer : ElapsedTime
        + runOpMode()
        ~ formatRate()
        ~ formatAngle()
        ~ formatDegrees()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class SensorMRColor {
        ~ colorSensor : ColorSensor
        + runOpMode()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class SensorMRCompass {
        ~ compass : ModernRoboticsI2cCompassSensor
        ~ timer : ElapsedTime
        + runOpMode()
        # doTelemetry()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class SensorMRGyro {
        ~ gyro : IntegratingGyroscope
        ~ modernRoboticsI2cGyro : ModernRoboticsI2cGyro
        ~ timer : ElapsedTime
        + runOpMode()
        ~ formatRaw()
        ~ formatRate()
        ~ formatFloat()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class SensorMRIrSeeker {
        + runOpMode()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class SensorMROpticalDistance {
        ~ odsSensor : OpticalDistanceSensor
        + runOpMode()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class SensorMRRangeSensor {
        ~ rangeSensor : ModernRoboticsI2cRangeSensor
        + runOpMode()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class SensorREV2mDistance {
        - sensorRange : DistanceSensor
        + runOpMode()
    }
  }
  

  package org.firstinspires.ftc.robotcontroller.external.samples {
    class SensorREVColorDistance {
        ~ sensorColor : ColorSensor
        ~ sensorDistance : DistanceSensor
        + runOpMode()
    }
  }
  

  BasicOpMode_Iterative -up-|> OpMode
  BasicOpMode_Linear -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  ConceptCompassCalibration -up-|> LinearOpMode
  ConceptCompassCalibration o-- HardwarePushbot : robot
  LinearOpModeHelper -up-|> Runnable
  ConceptDIMAsIndicator -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  ConceptI2cAddressChange -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  ConceptNullOp -up-|> OpMode
  ConceptRampMotorSpeed -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  ConceptRevSPARKMini -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  ConceptScanServo -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  ConceptSoundsASJava -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  ConceptSoundsOnBotJava -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  ConceptTelemetry -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  ConceptTensorFlowObjectDetection -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  ConceptTensorFlowObjectDetectionWebcam -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  ConceptVuMarkIdentification -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  ConceptVuMarkIdentificationWebcam -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  ConceptVuforiaNavRoverRuckus -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  ConceptVuforiaNavigation -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  ConceptVuforiaNavigationWebcam -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  PushbotAutoDriveByEncoder_Linear -up-|> LinearOpMode
  PushbotAutoDriveByEncoder_Linear o-- HardwarePushbot : robot
  LinearOpModeHelper -up-|> Runnable
  PushbotAutoDriveByGyro_Linear -up-|> LinearOpMode
  PushbotAutoDriveByGyro_Linear o-- HardwarePushbot : robot
  LinearOpModeHelper -up-|> Runnable
  PushbotAutoDriveByTime_Linear -up-|> LinearOpMode
  PushbotAutoDriveByTime_Linear o-- HardwarePushbot : robot
  LinearOpModeHelper -up-|> Runnable
  PushbotAutoDriveToLine_Linear -up-|> LinearOpMode
  PushbotAutoDriveToLine_Linear o-- HardwarePushbot : robot
  LinearOpModeHelper -up-|> Runnable
  PushbotTeleopPOV_Linear -up-|> LinearOpMode
  PushbotTeleopPOV_Linear o-- HardwarePushbot : robot
  LinearOpModeHelper -up-|> Runnable
  PushbotTeleopTank_Iterative -up-|> OpMode
  PushbotTeleopTank_Iterative o-- HardwarePushbot : robot
  SampleRevBlinkinLedDriver -up-|> OpMode
  SampleRevBlinkinLedDriver o-- DisplayKind : displayKind
  SampleRevBlinkinLedDriver +-down- DisplayKind
  SensorAdafruitRGB -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  SensorBNO055IMU -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  SensorBNO055IMUCalibration -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  SensorColor -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  SensorDIO -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  SensorDigitalTouch -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  SensorKLNavxMicro -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  SensorMRColor -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  SensorMRCompass -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  SensorMRGyro -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  SensorMRIrSeeker -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  SensorMROpticalDistance -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  SensorMRRangeSensor -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  SensorREV2mDistance -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable
  SensorREVColorDistance -up-|> LinearOpMode
  LinearOpModeHelper -up-|> Runnable


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
